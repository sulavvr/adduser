{
  "name": "Adduser",
  "tagline": "Manually adding local users to the UNIX system",
  "body": "# adduser.sh\r\nUnix adduser implementation\r\n\r\n### Usage (command-line interface)\r\n\t$ ./adduser -h\r\n\tusage: adduser [options] username\r\n\toptions -\r\n    \t--skeleton DIR    specify the skeleton directory (default: /etc/skel)                                                     \r\n    \t--home DIR        specify the home directory (default: /home)\r\n\tusername          name of valid user login on system\r\n\t\r\n\t$ ./adduser john\r\n\tERROR: cannot add user, must be administrator\r\n\t\r\n\t$ sudo ./adduser john\r\n\tEnter password:                                                                                                                                                                                         \r\n\tRe-enter password:                                                                                                                                                                                      \r\n\tUser john successfully created!   \r\n\t\r\n\t$ sudo ./adduser --skeleton /etc/skels john\r\n\t# creating user john using the /etc/skels to create home directory\r\n\t\r\n\t$ sudo ./adduser --skeleton /etc/kels john\r\n\tERROR: '/etc/kels' directory not found\r\n\t\r\n\t$ sudo ./adduser john\r\n\tERROR: 'john' already exists \r\n\t\r\n\t$ sudo ./adduser --home /test john\r\n\tERROR: '/test' directory not found \r\n\t\r\n\t$ sudo ./adduser --home /var/www john\r\n\t# creating user john with /var/www/john as the default home directory\t\r\n\t\r\n## Steps\r\n- Check if user running the script has root access.\r\n- Check if the given username already exists or not.\r\n- Check the validity of the username `[a-z_][a-z0-9_-]*$`. (Can contain only lowercase alphanumeric with underscore and dash, cannot start with anything other than a lowercase alphabet or an underscore)\r\n- Find the next available user and group ID using the passwd database.\r\n- Ask for password, use python and the crypt library to encrypt password based on `/etc/login.defs` ENCRYPT_METHOD\r\n- Update the `/etc/passwd`, `/etc/group`, `/etc/gshadow` and `/etc/shadow` files. (`/etc/shadow` doesn't need to be updated is using the `passwd` command)\r\n- Copy files from the skeleton directory to the new user's home directory and create a mail spool file.\r\n- Set permissions on the home directory.\r\n\r\n## Notes\r\n- Use `/etc/login.defs` to find different configurations for creating mail spool file, UID, GID and encryption method.\r\n- After updating `/etc/passwd` with the record, `passwd username` command can be run to set the password for username for default unix system password setup instead of using the python script to encrypt password manually.\r\n- Tested in Ubuntu 16.04.1 LTS and Ubuntu 14.04\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}